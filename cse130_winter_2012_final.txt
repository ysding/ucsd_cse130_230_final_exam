(*  1.a  *)

let rec find d k = 
	match d with 
	| [] -> raise Not_found
	| (k', v') :: t -> if k' = k then v' else
						if k' > k then raise Not_found else
						find t k;;

let prices = [("A", 20); ("B", 10); ("E", 201)];;
find prices "E";;


(*  1.b  *)
let rec add d k v = 
	match d with 
	| [] -> [(k, v)]
	| (k', v') :: t -> if k' = k then (k, v) :: t else
						(*my error here. I used > then < *)   
						if k < k' then (k, v) :: d else
						(k', v') :: (add t k v);;

(*  1.c forgot the define of List.map  *)
let keys d = let helper (k, v) = k in
			List.map helper d;;
						
(*  1.d  *)
let values d = let helper (k, v) = v in
			List.map helper d;;
			
			
(*  1.e  *)
let key_of_max_val d = 
	let helper (k, v) (k', v') = if v' > v then (k', v') else (k, v) in
	(*  fold_fn base emlt.  *)
	match d with
	| [] -> raise Not_found
	| base::t -> List.fold_left helper base t;;
						
(*  test case  *)					
key_of_max_val prices;;


# python img manipulations.
# 2.a
img1 = [[ 11, 0, 12],
		[0, 0, 0],
		[13, 0, 14],
		[15, 16, 17]]

# square_img: square all value in img
def square_img(img):
	return [ [v*v for v in l] for l in img]

square_img(img1)

# 2.b
# crop_img crop img assuming that all (x, y) in img.
def crop_img(img, x1, y1, x2, y2):
	return [ [ img[y][x] for x in range(x1, x2)] for y in range(y1, y2) ]
	
# test case
crop_img(img1, 0, 1, 2, 4)


# 1.c
# why not use the build-in function?
def zip(l1, l2):
	return [(l1[i], l2[i]) for i in range(min(len(l1), len(l2)))]
# forgot to return..

# 2.d add to img by add value in corresponding pixels.
def add_imgs(img1, img2):
	return [[ v1+v2 for v1, v2 in zip(l1, l2)] for (l1, l2) in zip(img1, img2)]

	
# 3. python decorator to get derivative
# only for one parameter function
def derivative(delta):
	class deco: # wrote class as def
		def __init__(self, f):
			self.f = f
		def __call__(self, *args):
			res = (self.f(args[0] + delta) - self.f(*args)) / delta
			return round(res, 2)
	return deco	# forgot to return

# test cases:
@derivative(0.0001)
def square(x): return x * x

square(10)
square(20)


# Extra credit...
def derivative(delta):
	def decorator(f):
		def decorated(*args):
			# copy and paste forgot to remove self.
			res = (f(args[0] + delta) - f(*args)) / delta
			return round(res, 2)
		return decorated
	return decorator
			

%% 4. prolog sorted function
sorted([]).
sorted([_]).
sorted([A, B | T]) :- A =< B, sorted([B | T]).
%% used <=...
sorted([1,2,3,3,4]).
sorted([10,2,2,2]).

%% 4.b  sort is static method sort2 better.
sort2(L1, L2) :- permutation(L1, L2), sorted(L2), !.			

sort2([1,2,3,1], L).

%% 4.c
split([], [], []).
split([X], [X], []).
%% O for odd E for even-indexed.
split([X | T], [X | O], [Y | E]) :- split(T, [Y | E], O).
%% [Y | E] to check even is not empty.
%% test case:
split([0,1,2,3,4,5,6], X, Y).


%% 4.d

merge([], L, L).
merge(L, [], L).
merge([X | L1], [Y | L2], [X | L3]) :- X > Y, merge([X | L1], L2, L3).
merge([X | L1], [Y | L2], [Y | L3]) :- Y >= X, merge(L1, [Y | L2], L3).
%% error: Blend up > < =< >=
%% test case
merge([X,3], [2, 4, Y], [1, 2, 3, 4, 5]).


%% 4.e  merge_sort
merge_sort([], []).
merge_sort([A], [A]).
merge_sort(L, S) :- split(L, X1, Y1), merge_sort(X1, X2),
					merge_sort(Y1, Y2), merge(X2, Y2, S), !. 
%% need ! to cut since the 2nd predicate and 3rd predicate can solve the same
%% situation and pring infinite same ans.
merge_sort([1,2,12,5,4,1,3,2,7], S).






		
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						